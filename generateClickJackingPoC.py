# -*- coding: utf-8 -*-

from burp import IBurpExtender, IContextMenuFactory
from java.util import List, ArrayList
from javax.swing import JMenuItem, JOptionPane, JButton, JPanel
from java.awt import Toolkit, BorderLayout
from java.awt.datatransfer import StringSelection
from java.awt.event import ActionListener

class CopyActionListener(ActionListener):
    def __init__(self, text):
        self.text = text

    def actionPerformed(self, event):
        self.copyToClipboard(self.text)

    def copyToClipboard(self, text):
        selection = StringSelection(text)
        clipboard = Toolkit.getDefaultToolkit().getSystemClipboard()
        clipboard.setContents(selection, selection)

class CloseActionListener(ActionListener):
    def actionPerformed(self, event):
        frame = JOptionPane.getRootFrame()
        frame.dispose()

class BurpExtender(IBurpExtender, IContextMenuFactory):
    
    def registerExtenderCallbacks(self, callbacks):
        self._callbacks = callbacks
        self._helpers = callbacks.getHelpers()
        callbacks.setExtensionName("Generate Clickjacking PoC")
        print("Successfully Loaded...")
        callbacks.registerContextMenuFactory(self)
        return

    def createMenuItems(self, invocation):
        menu = ArrayList()
        self.context = invocation
        menu.add(JMenuItem("Generate Clickjacking PoC", actionPerformed=self.generatePoC))
        return menu

    def generatePoC(self, event):
        http_traffic = self.context.getSelectedMessages()
        for traffic in http_traffic:
            analyzed_request = self._helpers.analyzeRequest(traffic)
            url = analyzed_request.getUrl()
            protocol = "https://" if url.getProtocol() == "https" else "http://"
            host = url.getHost()
            path = url.getPath()
            full = protocol + host + path
            cj_poc = """
            <!DOCTYPE html>
            <html lang="en">

            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>BurpSuite Generate ClickJacking PoC</title>
                <style>
                </style>
            </head>

            <body style="background-color: beige;">

                <!-- Start Section -->
                <div>
                    <center>
                        <h3>This proof-of-concept Generated by BurpSuite Generate ClickJacking PoC extension! </h3>
                    </center>
                </div>
                <br>
                <br>

                <!-- * Vulnerable host in the iframe src  -->
                <div>
                    <iframe src="{}" frameborder="0" width="100%" height="800px"></iframe>
                </div>

            </body>
            </html>
            """.format(full)
            
            print("\n" + full)
            self.showMessageBox(cj_poc)
        return

    def showMessageBox(self, message):
        panel = JPanel()
        panel.setLayout(BorderLayout())
        
        copy_button = JButton("Copy")
        copy_button.addActionListener(CopyActionListener(message))

        close_button = JButton("Close")
        close_button.addActionListener(CloseActionListener())

        button_panel = JPanel()
        button_panel.add(copy_button)
        button_panel.add(close_button)

        panel.add(button_panel, BorderLayout.SOUTH)

        panel.add(JOptionPane(JOptionPane.INFORMATION_MESSAGE, message=message, options=[]), BorderLayout.CENTER)

        dialog = JOptionPane(panel, JOptionPane.PLAIN_MESSAGE, JOptionPane.DEFAULT_OPTION, None, [], copy_button)
        dialog.createDialog(None, "ClickJacking PoC").setVisible(True)
        return
    
    
    def unloadExtension(self):
        print("Unloading extension...")
        # No specific resources to clean up
        return

# Initialize the BurpExtender class
callbacks = None

# Add the extension to the Burp Suite interface
extender = BurpExtender()

